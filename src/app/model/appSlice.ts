import {AnyAction, createSlice, isFulfilled, isPending, isRejected, PayloadAction} from '@reduxjs/toolkit'
import {todolistsThunks} from "features/TodolistsList/model/todolists/todolistsSlice";
import {tasksThunks} from "features/TodolistsList/model/tasks/tasksSlice";
import {authThunks} from "features/auth/model/authSlice";

const slice = createSlice({
    name: 'app',
    initialState: {
        //–ø—Ä–æ—Å—Ö–æ–¥–∏—Ç –ª–∏ —Å–µ–π—á–∞—Å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
        status: 'loading' as RequestStatusType,
        //–µ—Å–ª–∏ –ø—Ä–æ–∑–æ–π–¥–µ—Ç –∫–∞–∫–∞—è-—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞-–º—ã –∑–∞–ø–∏—à–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ —Å—é–¥–∞
        error: null as null | string,
        //true –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–æ—Å—å(–ø—Ä–æ–≤–µ—Ä–∏–ª–∏ —é–∑–µ—Ä–∞, –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ç.–¥.)
        // isInitialized: false,
    },
    reducers: {
        setAppError: (state, action: PayloadAction<{ error: null | string }>) => {
            //return { ...state, error: action.error }
            state.error = action.payload.error
        },
    },
    extraReducers: builder => {
        builder

            .addMatcher(
                isPending,
                (state) => {
                    state.status = 'loading'
                }
            )
            .addMatcher(
                isFulfilled,
                (state) => {
                    state.status = 'succeeded'
                }
            )
            .addMatcher(
                isRejected,
                (state, action: AnyAction) => {
                    state.status = 'failed'
                    if (action.payload) {
                        if (action.type === todolistsThunks.addTodolist.rejected.type
                            || action.type === tasksThunks.addTask.rejected.type
                            || action.type === todolistsThunks.updateTodolist.rejected.type
                            || action.type === tasksThunks.updateTask.rejected.type
                            || action.type === authThunks.initializeApp.rejected.type
                        ) {
                            // üö©–ï—Å–ª–∏ –ø–æ–ø–∞–¥–∞–µ–º –≤–æ –≤—Ç–æ—Ä–æ–π if, —Ç–æ –æ—à–∏–±–∫–∞ –±—É–¥–µ—Ç –ª–æ–∫–∞–ª—å–Ω–∞—è(–ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞)
                            return
                        };
                        state.error = action.payload.messages[0]
                    } else {
                        // üö©–ï—Å–ª–∏ –ø–æ–ø–∞–¥–∞–µ–º —Å—é–¥–∞, —Ç–æ –æ—à–∏–±–∫–∞ –±—É–¥–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω–∞—è (ErrorSnackbar.tsx)
                        state.error = action.error.message ? action.error.message : 'Some error occurred'
                    }
                })

    }
})


export const appSlice = slice.reducer
export const appActions = slice.actions

//type
export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'
export type InitialAppStateType = ReturnType<typeof slice.getInitialState>
